---
import Icon, { Props as IconProps } from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: "/" },
  { label: "Work", href: "/work/" },
  { label: "About", href: "/about/" },
];

/** Icon links to social media — edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: IconProps["icon"] }[] = [
  {
    label: "Twitter",
    href: "https://twitter.com/sobanpablo",
    icon: "twitter-logo",
  },
  { label: "Twitch", href: "https://twitch.tv/noctate12", icon: "twitch-logo" },
  {
    label: "GitHub",
    href: "https://github.com/infiplaya",
    icon: "github-logo",
  },
];
---

<nav>
  <div
    class="flex w-full items-center sm:px-10 justify-between md:justify-center p-5 lg:px-20"
  >
    <a
      href="/"
      class="text-lg sm:text-xl font-semibold tracking-tighter flex items-center gap-3"
    >
      Paweł Sobaniec
    </a>
    <menu-button
      class="flex items-center md:hidden rounded-lg p-1 dark:hover:bg-slate-700"
    >
      <template>
        <button class="menu-button" aria-expanded="false">
          <span class="sr-only">Menu</span>
          <Icon icon="list" />
        </button>
      </template>
    </menu-button>

    <ul
      class="hidden md:sticky md:top-0 md:flex md:ml-auto md:mr-auto gap-3 dark:bg-slate-800 bg-slate-200 p-3 rounded-lg"
    >
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "font-semibold text-slate-800 dark:text-slate-200 rounded-lg hover:bg-teal-500/50 dark:hover:bg-teal-600/50 p-2",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
              target="_blank"
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>

    <div class="hidden md:flex gap-3">
      {
        iconLinks.map(({ href, icon, label }) => (
          <a href={href} class="social">
            <span class="sr-only">{label}</span>
            <Icon
              icon={icon}
              classNames="hover:stroke-teal-500 dark:hover:stroke-teal-500"
            />
          </a>
        ))
      }
      <div>
        <ThemeToggle />
      </div>
    </div>
  </div>
  <div
    id="menu-content"
    class="bg-slate-100 dark:bg-slate-800 lg:hidden rounded-lg z-10 absolute w-full"
  >
    <ul class="flex flex-col gap-3 pt-5 pb-10 pl-5">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "font-semibold text-slate-800 dark:text-slate-200",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
              target="_blank"
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
    <div
      class="px-5 py-5 flex justify-between border-t border-slate-200 dark:border-slate-700"
    >
      <div class="flex gap-3">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
      </div>

      <div>
        <ThemeToggle />
      </div>
    </div>
  </div>
</nav>

<style>
  .active {
    @apply text-slate-900;
  }
</style>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById("menu-content")!;
      menu.hidden = true;

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false");
        menu.hidden = !expand;
      };

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener("click", () => setExpanded(menu.hidden));
    }
  }
  customElements.define("menu-button", MenuButton);
</script>
